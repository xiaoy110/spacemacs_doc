* Spacemacs的配置
** 添加的包
#+BEGIN_SRC Emacs-Lisp
Dotspacemacs-Configuration-Layers '(
Elpy
Auto-Completion
Emacs-Lisp
Go
Markdown
Org
Git
Syntax-Checking
)
Dotspacemacs-Additional-Packages'(
Counsel
Swiper
Multiple-Cursors
)
#+END_SRC
** 快捷键绑定
#+BEGIN_SRC Emacs-List

;; swiper counsel 快捷键绑定
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)


;; multiple-cursors 快捷键绑定
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** f5 切换到init.el
#+BEGIN_SRC emacs-listp

(defun open-init-file()
  (interactive)
  (find-file "~/.emacs.d/init.el"))

;; 这一行代码，将函数 open-init-file 绑定到 <f5> 键上
(global-set-key (kbd "<f5>") 'open-init-file)
;; 移动到行尾
(global-set-key (kbd "M-n") 'move-end-of-line)
#+END_SRC

** 简单的快捷键 
#+BEGIN_EXAMPLE
C-f 向后移动
C-b 向前移动
C-a 行前
M-n 行后（自己绑定）
#+END_EXAMPLE
** 安装python环境 
#+BEGIN_SRC emacs-listp
git clone git@github.com:TheBB/elpy-layer ~/.emacs.d/private/elpy
setq-default dotspacemacs-configuration-layers '(elpy))

#+END_SRC
** 修改emace的各种颜色
- M-x customeize-group 然后输入 修要修改颜色的层 如org-faces
<s    然后按tab按键
C-c ' 可以跳转到文本编辑模式
再输入 C-c ' 就可以回来了
#+BEGIN_SRC 
- #+BEGIN_SRC python
  - import time
  - print time.time()
- #+END_SRC
#+END_SRC
- 例子
<e    然后按tab按键
#+BEGIN_EXAMPLE
- #+BEGIN_EXAMPLE
- #+END_EXAMPLE
#+END_EXAMPLE
<v    然后按tab按键
#+BEGIN_EXAMPLE
- #+BEGIN_VERSE
- #+END_VERSE
#+END_EXAMPLE
** git 提交文件
#+BEGIN_EXAMPLE

提交 仓库 git g c c   输入点东西 wq 退出
push 仓库 SPC g P u   输入用户名 密码
#+END_EXAMPLE
** 查看帮助
- 查看各种帮助文档SPC h T
- SPC t SPC
- 查看快捷键帮助 C-h k 按下要查寻的快捷键
- 查看函数帮助 C-h f 输入要查寻的函数
- 按q退出 C-g 取消
** 插件
*** web-mode js2-mode
- C-x d 进入Dired mode
- + 创建目录
- g 刷新目录
- C 拷贝
- D 删除
- R 重命名
- d 标记删除
- u 取消标记
- x 执行标记
*** web-mode
install web-mode
#+BEGIN_SRC emacs_lisp
dotspacemacs-additional-packages '(web-mode js2-mode)
#+END_SRC
让html使用web-mode打开,js文件使用js-mode模式打开
#+BEGIN_SRC emacs_lisp
(setq auto-mode-alist
      (append
       '(("\\.js\\'" . js2-mode))
       '(("\\.html\\'" . web-mode))
       auto-mode-alist))
#+END_SRC

*** occur and imenu
方便修改文件
M-s o 可以看到查找内容的列表，按e进行编辑
#+BEGIN_SRC emacs_lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))
(global-set-key (kbd "M-s o") 'occur-dwim)

#+END_SRC
显示当前js文件里面的函数
#+BEGIN_SRC  emacs_lisp
(defun js2-imenu-make-index ()
      (interactive)
      (save-excursion
        ;; (setq imenu-generic-expression '((nil "describe\\(\"\\(.+\\)\"" 1)))
        (imenu--generic-function '(("describe" "\\s-*describe\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("it" "\\s-*it\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("test" "\\s-*test\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("before" "\\s-*before\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("after" "\\s-*after\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("Function" "function[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]*(" 1)
                                   ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
                                   ("Function" "^var[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
                                   ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*()[ \t]*{" 1)
                                   ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*:[ \t]*function[ \t]*(" 1)
                                   ("Task" "[. \t]task([ \t]*['\"]\\([^'\"]+\\)" 1)))))
(add-hook 'js2-mode-hook
              (lambda ()
                (setq imenu-create-index-function 'js2-imenu-make-index)))

(global-set-key (kbd "M-s i") 'counsel-imenu)

#+END_SRC

*** expand-region
#+BEGIN_SRC emacs_lisp
(global-set-key (kbd "C-=") 'er/expand-region)

#+END_SRC
*** iedit
默认已经安装
#+BEGIN_SRC emacs_lisp
(global-set-key (kbd "M-s e") 'iedit-mode)
#+END_SRC
*** 使用M-n and M-p 换成 C-n and C-p
#+BEGIN_SRC emacs_lisp
(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
*** 批量修改文件名
C-x C-q 可以直接在Dired Mode 中编辑
*** 搜索文件内的内容
helm-ag 默认已经安装
#+BEGIN_SRC emacs_lisp
(global-set-key (kbd "C-c p s") 'helm-do-ag-project-root)
#+END_SRC
*** 语法检查
默认已经安装
flycheck-mode
#+begin_src emacs_lisp
(add-hook 'js2-mode-hook 'flycheck-mode)
#+end_src
